schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Comment {
  content: String
  user: User
}

type Document {
  name: String
  size: Float
  type: String
}

type Message {
  content: String
  receiver: User
  sender: User
  status: MESSAGE_STATUS
}

type ModelRospointConnection {
  items: [Rospoint]
  nextToken: String
  startedAt: AWSTimestamp
}

type ModelUserConnection {
  items: [User]
  nextToken: String
  startedAt: AWSTimestamp
}

type Mutation {
  createRospoint(condition: ModelRospointConditionInput, input: CreateRospointInput!): Rospoint
  createUser(condition: ModelUserConditionInput, input: CreateUserInput!): User
  deleteRospoint(condition: ModelRospointConditionInput, input: DeleteRospointInput!): Rospoint
  deleteUser(condition: ModelUserConditionInput, input: DeleteUserInput!): User
  updateRospoint(condition: ModelRospointConditionInput, input: UpdateRospointInput!): Rospoint
  updateUser(condition: ModelUserConditionInput, input: UpdateUserInput!): User
}

type PaymentMethod {
  identifier: String
  isConfirm: Boolean
  provider: PAYMENT_PROVIDER
  type: PAYMENT_TYPE
}

type PriceRange {
  from: Float
  price: Float
  to: Float
}

type Query {
  getRospoint(id: ID!): Rospoint
  getUser(id: ID!): User
  listRospoints(filter: ModelRospointFilterInput, limit: Int, nextToken: String): ModelRospointConnection
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  syncRospoints(filter: ModelRospointFilterInput, lastSync: AWSTimestamp, limit: Int, nextToken: String): ModelRospointConnection
  syncUsers(filter: ModelUserFilterInput, lastSync: AWSTimestamp, limit: Int, nextToken: String): ModelUserConnection
}

type Request {
  description: String
  messages: [Message]
  name: String
  status: REQUEST_STATUS
}

type Rospoint {
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  _version: Int!
  comments: [Comment]
  customers: [User]
  firstName: String
  id: ID!
  lastName: String!
  owner: String
  paymentMethods: [PaymentMethod]
  requests: [Request]
  rospointServices: [RospointService]
}

type RospointService {
  prices: [PriceRange]
  service: Service
}

type Service {
  description: String!
  id: ID!
  name: String
}

type Subscription {
  onCreateRospoint(owner: String!): Rospoint @aws_subscribe(mutations : ["createRospoint"])
  onCreateUser(owner: String!): User @aws_subscribe(mutations : ["createUser"])
  onDeleteRospoint(owner: String!): Rospoint @aws_subscribe(mutations : ["deleteRospoint"])
  onDeleteUser(owner: String!): User @aws_subscribe(mutations : ["deleteUser"])
  onUpdateRospoint(owner: String!): Rospoint @aws_subscribe(mutations : ["updateRospoint"])
  onUpdateUser(owner: String!): User @aws_subscribe(mutations : ["updateUser"])
}

type Suggestion {
  content: String!
  id: ID!
  status: SUGGESTION_STATUS!
  title: String!
}

type User {
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  _version: Int!
  firstName: String
  id: ID!
  lastName: String!
  owner: String
  requests: [Request]
  suggestions: [Suggestion]
}

enum MESSAGE_STATUS {
  ARRIVE
  NEW
  READ
  SEND
}

enum ModelAttributeTypes {
  _null
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
}

enum ModelSortDirection {
  ASC
  DESC
}

enum PAYMENT_PROVIDER {
  MTN
  ORANGE
}

enum PAYMENT_TYPE {
  MOBILE
  PREPAID
}

enum REQUEST_STATUS {
  CANCEL
  DONE
  NEW
  PENDING
}

enum SUGGESTION_STATUS {
  DONE
  NEW
  PENDING
}

input CommentInput {
  content: String
  user: UserInput
}

input CreateRospointInput {
  _version: Int
  comments: [CommentInput]
  customers: [UserInput]
  firstName: String
  id: ID
  lastName: String!
  paymentMethods: [PaymentMethodInput]
  requests: [RequestInput]
  rospointServices: [RospointServiceInput]
}

input CreateUserInput {
  _version: Int
  firstName: String
  id: ID
  lastName: String!
  requests: [RequestInput]
  suggestions: [SuggestionInput]
}

input DeleteRospointInput {
  _version: Int
  id: ID
}

input DeleteUserInput {
  _version: Int
  id: ID
}

input MessageInput {
  content: String
  status: MESSAGE_STATUS
}

input ModelBooleanInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  eq: Boolean
  ne: Boolean
}

input ModelFloatInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
}

input ModelIDInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  size: ModelSizeInput
}

input ModelIntInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelRospointConditionInput {
  and: [ModelRospointConditionInput]
  firstName: ModelStringInput
  lastName: ModelStringInput
  not: ModelRospointConditionInput
  or: [ModelRospointConditionInput]
}

input ModelRospointFilterInput {
  and: [ModelRospointFilterInput]
  firstName: ModelStringInput
  id: ModelIDInput
  lastName: ModelStringInput
  not: ModelRospointFilterInput
  or: [ModelRospointFilterInput]
}

input ModelSizeInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelStringInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
  size: ModelSizeInput
}

input ModelUserConditionInput {
  and: [ModelUserConditionInput]
  firstName: ModelStringInput
  lastName: ModelStringInput
  not: ModelUserConditionInput
  or: [ModelUserConditionInput]
}

input ModelUserFilterInput {
  and: [ModelUserFilterInput]
  firstName: ModelStringInput
  id: ModelIDInput
  lastName: ModelStringInput
  not: ModelUserFilterInput
  or: [ModelUserFilterInput]
}

input PaymentMethodInput {
  identifier: String
  isConfirm: Boolean
  provider: PAYMENT_PROVIDER
  type: PAYMENT_TYPE
}

input PriceRangeInput {
  from: Float
  price: Float
  to: Float
}

input RequestInput {
  description: String
  messages: [MessageInput]
  name: String
  status: REQUEST_STATUS
}


input RospointServiceInput {
  prices: [PriceRangeInput]
  service: ServiceInput
}

input ServiceInput {
  description: String!
  id: ID!
  name: String
}

input SuggestionInput {
  content: String!
  id: ID!
  status: SUGGESTION_STATUS!
  title: String!
}

input UpdateRospointInput {
  _version: Int
  comments: [CommentInput]
  customers: [UserInput]
  firstName: String
  id: ID!
  lastName: String
  paymentMethods: [PaymentMethodInput]
  requests: [RequestInput]
  rospointServices: [RospointServiceInput]
}

input UpdateUserInput {
  _version: Int
  firstName: String
  id: ID!
  lastName: String
  requests: [RequestInput]
  suggestions: [SuggestionInput]
}

input UserInput {
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  _version: Int!
  firstName: String
  id: ID!
  lastName: String!
  requests: [RequestInput]
  suggestions: [SuggestionInput]
}
